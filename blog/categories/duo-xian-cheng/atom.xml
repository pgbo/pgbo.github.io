<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 多线程 | 光波 Develop for iOS]]></title>
  <link href="http://pgbo.github.io/blog/categories/duo-xian-cheng/atom.xml" rel="self"/>
  <link href="http://pgbo.github.io/"/>
  <updated>2015-04-18T03:23:58+08:00</updated>
  <id>http://pgbo.github.io/</id>
  <author>
    <name><![CDATA[光波]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在多线程下使用Core Data]]></title>
    <link href="http://pgbo.github.io/blog/2015/04/13/use-core-data-under-multi-threads/"/>
    <updated>2015-04-13T00:05:09+08:00</updated>
    <id>http://pgbo.github.io/blog/2015/04/13/use-core-data-under-multi-threads</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>在开发iOS应用过程中，不免会和数据的操作打交道，为了方便和快速，你可以选择基于sqlite的第三方库如<code>FMDB</code>。当然你也可能像我一样，花点时间了解一下Core Data，自己动手解决数据库操作的问题，其中一个稍微复杂的问题就是多线程下数据操作的问题。</p>

<p>话说事情的发展是这样的，起初你写了一个聊天应用，用到了Core Data来存取聊天数据，那时还很简单，数据的存取操作都基于一个application级别的唯一的<code>NSManagedObjectContext</code>，这时候一切都还很美好，没发现什么问题；可是随着业务的增多，你的应用开始发现越来越多的地方要对某类数据进行存取，聊天模块要查询聊天信息列表，同时在垃圾过滤模块要删除垃圾信息，更惊恐的是，同时在新消息提醒模块还在连续地插入新聊天信息，这时候你的应用在听到第一声新消息提醒声的时候却奔溃了。怎么了呢？你陷入深深的思考之中&hellip;</p>

<h3>哪里出问题了？</h3>

<p>你的数据存取都基于一个<code>NSManagedObjectContext</code>，你并没有对它进行多线程环境的改装。</p>

<h3>要怎么做？</h3>

<p>简单一句话，就是在多线程下正确地使用Core Data。</p>

<h3>实现方法</h3>

<ul>
<li><strong>Thread Confinement</strong></li>
</ul>


<p>在 iOS 5之前，官方推荐的是使用Thread Confinement，也就是传统的多线程<code>NSManagedObjectContext</code>。每个线程使用独立的<code>MOC(managed object context)</code>，然后共享一个<code>PSC(persistent store coordinator)</code>。同时在线程之间传递数据时，要传递线程安全的<code>objectID</code>，而不是不安全的<code>NSMangedObject</code>。线程之间通过监听<code>NSManagedObjectContextDidSaveNotification</code>通知然后调用<code>mergeChangesFromContextDidSaveNotification:</code>方法来保持数据的一致性。一张图解释这种方式：</p>

<p><img src="/images/core_data/Thread%20confinement.png" title="Thread Confinement" alt="Thread Confinement" /></p>

<ul>
<li><strong>Queue-based concurrency</strong></li>
</ul>


<p>iOS5之后为了更方便地处理Core Data多线程下并发问题，通过构造方法<code>initWithConcurrencyType:</code>可以构造3种类型的MOC:
1.  <code>Confinement (NSConfinementConcurrencyType)</code>. 默认类型，主要是为了兼容iOS5之前的<code>Confinement</code>方式，这也是iOS5之后不推荐的方法。官方说法是，只有在<code>MOC</code>的<code>parent store</code>是一个<code>persistent store coordinator</code>时才可以使用这种类型的<code>MOC</code>。
2.  <code>Private queue (NSPrivateQueueConcurrencyType)</code>. 该类型的<code>MOC</code>创建和管理一个<code>private queue</code>，通过这种类型的<code>MOC</code>操作数据，就能实现数据的多线程操作。
3.  <code>Main queue (NSMainQueueConcurrencyType)</code>. 该类型的<code>MOC</code>和主线程关联了，它和<code>NSPrivateQueueConcurrencyType</code>的<code>MOC</code>类似，只是关联的queue变成了主线程，它设立的目的也是为了<code>MOC</code>能和界面打交道，比如<code>NSFetchedResultsViewController</code>.</p>

<p><code>MOC</code>可以指定<code>parent</code>，<code>MOC</code>的<code>CUD</code>操作在<code>save</code>之后就会冒泡到<code>parent</code>。一张图解释<code>Parent/Child Context</code>模型:</p>

<p><img src="/images/core_data/parent-child.png" title="Parent/child Context" alt="Parent/child Context" /></p>

<h3>那么问题来了，如何保证线程安全？</h3>

<p>引入了多线程，就要面对这个头痛的问题。<code>queue-based concurrency</code>的<code>MOC</code>通过使用<code>performBlock:</code>和<code>performBlockAndWait:</code>来保证在他们的代码块里的<code>NSManagedObject</code>线程安全。为了更好的让大家了解如何安全的使用Core Data，下面举一些例子。</p>

<ul>
<li>用例1，插入一条数据：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 在某上下文中&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 选择正确的MOC</span>
</span><span class='line'><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">moc</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">ThreadUtil</span> <span class="n">currentInMainThread</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">mainMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">privateMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// NSManagedObject错误的创建位置, 这里创建的NSManagedObject不安全</span>
</span><span class='line'><span class="c1">// NSManagedObject *moj = [NSMangedObject createXXXX];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">moc</span> <span class="nl">performBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="c1">// NSManagedObject正确的创建位置</span>
</span><span class='line'><span class="bp">NSManagedObject</span> <span class="o">*</span><span class="n">moj</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMangedObject</span> <span class="n">createXXXX</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">privateMOC</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>用例2，查询某数据列表：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 在某上下文中&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="n">createRequestXXX</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">results</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 选择正确的MOC</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">ThreadUtil</span> <span class="n">currentInMainThread</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">mainMOC</span> <span class="nl">performBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">mainMOC</span> <span class="n">excuteXXX</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>        <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">privateMOC</span> <span class="nl">performBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">privateMOC</span> <span class="n">excuteXXX</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>用例3，删除某些数据：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 在某上下文中&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 选择正确的MOC</span>
</span><span class='line'><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">moc</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">ThreadUtil</span> <span class="n">currentInMainThread</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">mainMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">privateMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 先查询出数据对应数据</span>
</span><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="n">createRequestXXX</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">results</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">moc</span> <span class="nl">performBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">privateMOC</span> <span class="n">excuteXXX</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 在mod的block里执行删除，不要跑到block外去删除，否则会造成NSManagedObject不安全</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSManagedObject</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">moj</span> <span class="k">in</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">privateMOC</span> <span class="nl">deleteObject</span><span class="p">:</span><span class="n">moj</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="c1">// 删除NSManagedObject错误的位置，在这里NSMangedObject会不安全</span>
</span><span class='line'><span class="c1">//for (NSManagedObject &lt;/em&gt;moj in results) {</span>
</span><span class='line'><span class="c1">//    [moj.managedContext deleteObject:moj];</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>用例4，更新某条数据：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 上下文</span>
</span><span class='line'><span class="c1">// 先根据条件查询相应数据</span>
</span><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="n">createRequestXXX</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">results</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 选择正确的MOC</span>
</span><span class='line'><span class="bp">NSManagedObjectContext</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">moc</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">ThreadUtil</span> <span class="n">currentInMainThread</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">mainMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="n">moc</span> <span class="o">=</span> <span class="n">privateMOC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">moc</span> <span class="nl">performBlockAndWait</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">moc</span> <span class="n">excuteXXX</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 正确地更新位置：在block里执行更新操作</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSManagedObject</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">moj</span> <span class="k">in</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">moj</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="p">@</span><span class="err">“小明”</span><span class="p">;</span>
</span><span class='line'><span class="n">moj</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span> <span class="err">……</span>
</span><span class='line'><span class="c1">// 提交会将变动冒泡到moc的parentContext</span>
</span><span class='line'><span class="p">[</span><span class="n">moc</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 错误地更新位置，不在block里执行会引起NSManagedObject的不安全</span>
</span><span class='line'><span class="c1">//for (NSManagedObject *moj in results) {</span>
</span><span class='line'><span class="c1">//     moj.name = @“小明”;</span>
</span><span class='line'><span class="c1">//     moj.age = 22; ……</span>
</span><span class='line'><span class="c1">//     [moc save:&amp;amp;err];</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>有没有形成可复用的框架？</h3>

<p>基于<code>queue-based concurrency</code>方式，有人提出<code>Asyschronized saving</code>模型，其精髓是把<code>Main MOC</code>的<code>parent</code>设置为一个<code>private MOC</code>, 然后把<code>persistent store coordinator</code>设置给这个最顶层的<code>private MOC</code>，在这个模型中，底层的<code>MOC</code>只要<code>save</code>，就会向它的<code>parent MOC</code>提交变化，比如界面上的创建和修改数据操作可以异步提交给<code>main moc</code>的<code>parent moc</code>, 该<code>moc</code>可以进行异步保存，<strong>所以界面不会卡顿</strong>。我自己基于这个<code>Asyschronized saving</code>模型，写了一些可复用的代码，能有效预防多线程下Core Data使用不安全的问题，同时在并发下对于数据的增删改查有不错的效果，具体可以在github上看代码和介绍文档<a href="https://github.com/pgbo/LvMultiThreadCoreDataDao" title="LvMultiThreadCoreDataDao">LvMultiThreadCoreDataDao</a></p>
]]></content>
  </entry>
  
</feed>
